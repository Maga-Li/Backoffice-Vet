// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectoFinal_LR.DatabaseContext;

#nullable disable

namespace ProjectoFinal_LR.Migrations.MainDb
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20221218195037_UserVersion1")]
    partial class UserVersion1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ProjectoFinal_LR.Models.Animal", b =>
                {
                    b.Property<int>("IdAnimal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("IdBreed")
                        .HasColumnType("int");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("IdSpecie")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("IdAnimal");

                    b.HasIndex("IdBreed");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdSpecie");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Appointment", b =>
                {
                    b.Property<int>("IdAppointment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdAnimal")
                        .HasColumnType("int");

                    b.Property<int>("IdMotive")
                        .HasColumnType("int");

                    b.Property<int>("IdPriority")
                        .HasColumnType("int");

                    b.Property<int>("IdVeterinarian")
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Schedule")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("WaitingTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("IdAppointment");

                    b.HasIndex("IdAnimal");

                    b.HasIndex("IdMotive");

                    b.HasIndex("IdPriority");

                    b.HasIndex("IdVeterinarian");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Breed", b =>
                {
                    b.Property<int>("IdBreed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdSpecie")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("IdBreed");

                    b.HasIndex("IdSpecie");

                    b.ToTable("Breeds");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<int>("TaxNumber")
                        .HasColumnType("int");

                    b.HasKey("IdClient");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Motive", b =>
                {
                    b.Property<int>("IdMotive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.HasKey("IdMotive");

                    b.ToTable("Motives");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Priority", b =>
                {
                    b.Property<int>("IdPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("IdPriority");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Specie", b =>
                {
                    b.Property<int>("IdSpecie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("IdSpecie");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Veterinarian", b =>
                {
                    b.Property<int>("IdVeterinarian")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("IdVeterinarian");

                    b.ToTable("Veterinarians");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Animal", b =>
                {
                    b.HasOne("ProjectoFinal_LR.Models.Breed", "Breed")
                        .WithMany()
                        .HasForeignKey("IdBreed")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectoFinal_LR.Models.Client", "Client")
                        .WithMany("Animals")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectoFinal_LR.Models.Specie", "Specie")
                        .WithMany("Animals")
                        .HasForeignKey("IdSpecie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Client");

                    b.Navigation("Specie");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Appointment", b =>
                {
                    b.HasOne("ProjectoFinal_LR.Models.Animal", "Animal")
                        .WithMany("Appointments")
                        .HasForeignKey("IdAnimal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectoFinal_LR.Models.Motive", "Motive")
                        .WithMany("Appointments")
                        .HasForeignKey("IdMotive")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectoFinal_LR.Models.Priority", "Priority")
                        .WithMany("Appointments")
                        .HasForeignKey("IdPriority")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectoFinal_LR.Models.Veterinarian", "Veterinarian")
                        .WithMany("Appointments")
                        .HasForeignKey("IdVeterinarian")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Motive");

                    b.Navigation("Priority");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Breed", b =>
                {
                    b.HasOne("ProjectoFinal_LR.Models.Specie", "Specie")
                        .WithMany("Breeds")
                        .HasForeignKey("IdSpecie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specie");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Animal", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Client", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Motive", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Priority", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Specie", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("ProjectoFinal_LR.Models.Veterinarian", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
